## Data directory configuration
# CSW harvester save a copy of harvested record in data.dir/harvested_data/csw
# Service/dataset analysis task save links to be indexed in data.dir/service-dataset-indexer_data/tasks
# Validation task save results in data.dir/validation-checker_data/tasks
data.dir=/usr/daobs/data

## Solr configuration
# Solr server URL eg. http://localhost:8983
solr.server.url=http://localhost:8080/daobs
solr.server.core=/usr/daobs/core

# Solr server credentials
solr.server.user=admin
solr.server.password=admin



## CSW harvester configuration
harvester.csw.startup.cli=false
harvester.csw.startup.webapp=true

# Folder containing the configuration file and
# the tasks folder. The task folder is polled for
# any harvesting tasks to create.
harvester.csw.config.folder=${data.dir}/harvester/

# Time in ms to poll for new tasks.
harvester.csw.tasks.delay=10000

# Number of records per page when calling a GetRecords operation
harvester.csw.getRecords.maxRecords=100

# File with the list of CSW to harvest
harvester.csw.config.filename=config-harvesters.xml



## Tasks / Service and dataset association analyzer configuration
# The search filter (ie. a Solr query).
task.service-dataset-indexer.filter=+resourceType:service
task.service-dataset-indexer.startup.cli=false
task.service-dataset-indexer.startup.jms=true
task.validation-checker.startup.background=false

# The field to return in the response
task.service-dataset-indexer.fields=id,recordOperateOn,serviceType,harvesterId

# The task folder is polled at regular interval to index
# any associations found.
task.service-dataset-indexer.folder=${data.dir}/service-dataset-indexer_data/tasks

# Time in ms to poll for new associations to index.
task.service-dataset-indexer.delay=10000

# Number of records per page
task.service-dataset-indexer.records.per.page=100



## Tasks / Validation configuration
# Start the command line interface - The task will start when the route starts
task.validation-checker.startup.cli=false

# Start the task when a JMS message is sent to the queue
task.validation-checker.startup.jms=true

# The task folder is polled at regular interval to index
# any validation report generated.
task.validation-checker.folder=${data.dir}/validation-checker_data/tasks

# Time in ms to poll for new associations to index.
task.validation-checker.delay=10000

# The search filter (ie. a Solr query).
# eg. all none validated records
# This filter is not relevant because the process will
# do paging over the set of records but the number of
# valid records will change over time.
task.validation-checker.filter=+documentType:metadata
# It's better to validate a set of record with a filter
# which is not affected by the process itself
# eg. only one record
#task.validation-checker.filter=id:570896ed-0462-46e5-bc7b-eaae317c5038
# eg. only on territory
#task.validation-checker.filter=territory:fi

# The field to return in the response
# * The document contains the XML document to validate against
# the validation engine (eg. XSD, Remote service)
# * The id is used to update the index with the results.
task.validation-checker.fields=id

# Number of records per page
task.validation-checker.records.per.page=100

# INSPIRE remote service validation
#task.validation-checker.inspire.validator.url=http://apps.titellus.net/GeoportalProxyWebServices/resources/INSPIREResourceTester?probeNetworkServices=false&probeDataResourceLocators=false
task.validation-checker.inspire.validator.url=http://inspire-geoportal.ec.europa.eu/GeoportalProxyWebServices/resources/INSPIREResourceTester?probeNetworkServices=false&probeDataResourceLocators=false
task.validation-checker.inspire.probeNetworkServices=false
task.validation-checker.inspire.probeDataResourceLocators=false
#task.validation-checker.inspire.validator.url=http://localhost/GeoportalProxyWebServices/resources/INSPIREResourceTester

# Threshold used to define a valid record
# when the completness indicator is above this
# value
task.validation-checker.inspire.threshold=75.0


# INSPIRE Validator. One of inspirePostgresValidator (postgressql INSPIRE validator) or inspireOnlineValidationClient (online INSPIRE validator).
task.validation-checker.validator=inspirePostgresValidator
# Postgres INSPIRE validator datasource url
task.validation-checker.inspire.postgres.datasource.url=jdbc:postgresql://10.24.193.134:5432/geocat-dump-brgm
# Postgres INSPIRE validator datasource driver class name
task.validation-checker.inspire.postgres.datasource.driverClassName=org.postgresql.Driver
# Postgres INSPIRE validator datasource username
task.validation-checker.inspire.postgres.datasource.username=postgres
# Postgres INSPIRE validator datasource password
task.validation-checker.inspire.postgres.datasource.password=postgres
# Postgres INSPIRE validator : Query to get the metadata INSPIRE validation result from a metadata uuid
task.validation-checker.inspire.postgres.sql.selectMetadataValidationResultQuery=select mdv_rule_result from geocat.md_validation_results mdvr, geocat.metadata md where md.uuid = ? and mdvr.mdv_md_id = md.id and mdvr.mdv_rule_title='INSPIRE'
# Postgres INSPIRE validator : INPSIRE valid result rule (do not put accents)
task.validation-checker.inspire.postgres.validRuleResult=Metadonnee conforme